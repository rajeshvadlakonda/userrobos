{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/Scroll.js","components/Searchbox.js","components/Popup.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","src","alt","CardList","robots","map","user","i","username","Scroll","props","style","overflowY","border","height","children","Searchbox","searchChange","type","placeholder","onChange","Popup","onClick","closepopup","App","changeMessage","setState","message","onsearchChange","event","searchfield","target","value","openpopup","popup","state","console","log","fetch","response","json","users","this","filteredRobos","filter","robot","toLowerCase","includes","length","Fragment","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4LAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCaCQ,EATF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MACnB,OACI,sBAAKC,UAAU,mDAAf,UACI,6BAAKF,IACL,6BAAKC,IACL,qBAAKE,IAAG,+BAA4BJ,EAA5B,YAA0CK,IAAI,aCenDC,EA7BE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACf,OAKI,aAHA,CAGA,gBAUIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OAAO,cAAC,EAAD,CAEPV,GAAMO,EAAOG,GAAGV,GAChBC,KAAQM,EAAOG,GAAGT,KAClBU,SAAYJ,EAAOG,GAAGC,SACtBT,MAASK,EAAOG,GAAGR,OAJZQ,SCVRE,EARA,SAACC,GACZ,OACA,qBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,SAAlE,SACKJ,EAAMK,YCEAC,EANG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,uBAAOC,KAAO,SAASC,YAAa,SAASC,SAAUH,EACvDjB,UAAU,kCCSHqB,G,MAVD,SAACX,GACX,OACI,qBAAKV,UAAU,cAAf,SACI,qBAAKA,UAAU,iBAAf,SACI,qBAAKA,UAAU,eAAcsB,QAASZ,EAAMa,WAA5C,qBC2GDC,E,kDAxGX,aAAc,IAAD,8BACT,gBAUJC,cAAgB,WACZ,EAAKC,SAAS,CACVC,QAAU,sBAbL,EAgBbC,eAAiB,SAACC,GACd,EAAKH,SAAS,CACVI,YAAYD,EAAME,OAAOC,SAlBpB,EAoBbC,UAAY,WACR,EAAKP,SAAS,CACVQ,OAAM,KAtBD,EAyBbX,WAAa,WACT,EAAKG,SAAS,CACVQ,OAAM,KAzBV,EAAKC,MAAQ,CACT/B,OAAQ,GACR0B,YAAa,GACbH,QAAS,YACTO,OAAO,GAEfE,QAAQC,IAAI,eARC,E,qDA8Bb,WAAoB,IAAD,OACfD,QAAQC,IAAI,kBACZC,MAAM,8CACLhD,MAAK,SAAAiD,GACF,OAAOA,EAASC,UAEnBlD,MAAK,SAAAmD,GACF,EAAKf,SAAS,CAACtB,OAAOqC,S,oBAK9B,WACI,MAAmCC,KAAKP,MAAjC/B,EAAP,EAAOA,OAAO0B,EAAd,EAAcA,YAAYI,EAA1B,EAA0BA,MAC1BE,QAAQC,IAAI,cACZ,IAAMM,EAAiBvC,EAAOwC,QAAO,SAAAC,GACjC,OAAOA,EAAM/C,KAAKgD,cAAcC,SAASjB,EAAYgB,kBAIzD,OAAQH,EAAcK,OAElB,eAAC,IAAMC,SAAP,WAECf,EAAQ,cAAC,EAAD,CAAOX,WAAYmB,KAAKnB,aAAgB,GAC7C,sBAAKvB,UAAU,KAAf,UACI,6BAAK0C,KAAKP,MAAMR,UAChB,wBAAQT,KAAK,SAASI,QAASoB,KAAKT,UAApC,wBACA,cAAC,EAAD,CAAWhB,aAAgByB,KAAKd,iBAChC,cAAC,EAAD,UACI,cAAC,EAAD,CAAUxB,OAAQuC,YAVH,oBAAI3C,UAAU,KAAd,2B,GAnDrBkD,IAAMC,WCKxBC,IAASC,OACP,eAAC,IAAMJ,SAAP,WACE,8BACE,cAAC,EAAD,MAFJ,OAQAK,SAASC,eAAe,SAO1BpE,M","file":"static/js/main.b124a85c.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\n// import CardList from './CardList';\r\n// const Card = (props) => {\r\n//     return(\r\n//         <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n//             <h2>{props.name}</h2>\r\n//             <h3>{props.email}</h3>\r\n//             <img src = \"https://robohash.org/test?200x200\" alt = \"robo\"/>\r\n//         </div>\r\n//     )\r\n// }\r\nconst Card = ({id,name,email}) => {\r\n    return(\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <h2>{name}</h2>\r\n            <h3>{email}</h3>\r\n            <img src = {`https://robohash.org/${id}?200x200`} alt=\"robo\"/>\r\n        </div>\r\n    )\r\n}\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';  \r\nconst CardList = ({robots}) =>{\r\n    return(\r\n        \r\n        // const cardArray = robots.map((user,i) => {\r\n        //         return <Card id = {robots[i].id} name = {robots[i].name} username = {robots[i].username} email = {robots[1].email}/> \r\n        //     })\r\n        <div>\r\n        {/* <h2> using mapping </h2>\r\n                {cardArray}\r\n                \r\n        <p>using destructering </p>\r\n            <Card id = {robots[0].id} name = {robots[0].name} username = {robots[0].username} email = {robots[0].email}/>\r\n            <Card id = {robots[1].id} name = {robots[1].name} username = {robots[1].username} email = {robots[1].email}/>  */}\r\n\r\n        {/*~~~~ can use mapp for looping for scenarios where there can be hundreds of cards ~~~~~~*/}\r\n        {\r\n            robots.map((user,i) => {\r\n                return <Card \r\n                key = {i}\r\n                id = {robots[i].id} \r\n                name = {robots[i].name} \r\n                username = {robots[i].username} \r\n                email = {robots[i].email}/> \r\n            })\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n    return(\r\n    <div style={{overflowY:'scroll', border:'3px solid black', height:'600px'}}>\r\n        {props.children}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\nconst Searchbox = ({searchChange}) => {\r\n    return(\r\n        <input type = \"search\" placeholder= \"search\" onChange={searchChange} \r\n        className=\"pa3 ba b-green bg-light-blue\"/>\r\n    )\r\n}\r\nexport default Searchbox;","import React from 'react'\r\nimport './popup.css';\r\n\r\nconst Popup = (props) => {\r\n    return(\r\n        <div className=\"popup--back\">\r\n            <div className=\"popup--content\">\r\n                <div className=\"popup--close\"onClick={props.closepopup}>x</div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Popup;","// import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport Cardlist from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Popup from '../components/Popup';\r\n\r\n// import {robots} from '../components/robots';\r\n\r\nclass App extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: '',\r\n            message: 'Robo Fans',\r\n            popup: false\r\n        }\r\n    console.log(\"constructor\");\r\n    }\r\n    \r\n    changeMessage = () =>{\r\n        this.setState({\r\n            message : 'No records found'\r\n        });\r\n    }\r\n    onsearchChange = (event) =>{\r\n        this.setState({\r\n            searchfield:event.target.value});\r\n        }\r\n    openpopup = () =>{\r\n        this.setState({\r\n            popup:true\r\n        })\r\n    }\r\n    closepopup = () =>{\r\n        this.setState({\r\n            popup:false\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"will mount run\")\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>{\r\n            return response.json()\r\n        })\r\n        .then(users =>{\r\n            this.setState({robots:users})\r\n        })\r\n    }\r\n    \r\n\r\n    render(){\r\n        const {robots,searchfield,popup} = this.state\r\n        console.log(\"render run\");\r\n        const filteredRobos =  robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n\r\n        return !filteredRobos.length ? <h1 className=\"tc\">Loading..</h1> : \r\n        (\r\n            <React.Fragment>\r\n            \r\n            {popup ? <Popup closepopup={this.closepopup}/> : \"\"}\r\n                <div className='tc'>\r\n                    <h1>{this.state.message}</h1>\r\n                    <button type=\"submit\" onClick={this.openpopup} >subscrible</button>\r\n                    <Searchbox searchChange = {this.onsearchChange}/>\r\n                    <Scroll>\r\n                        <Cardlist robots={filteredRobos} />\r\n                    </Scroll>\r\n                    {/* <Cardlist robots={robots} /> */}\r\n                    {/* <App /> */}\r\n                    {/* {filteredRobos.length === 0 ? this.changeMessage : \" \"}  */}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n    // const App = () => {\r\n        // return(\r\n        // )\r\n    // }\r\n// class App extends Component{\r\n//     constructor(){\r\n//         super();\r\n//         this.state = ({\r\n//             name : 'constructor name'\r\n//         })\r\n//     }\r\n// componentWillMount(){\r\n//     setTimeout( ()=>{\r\n//         this.setState({\r\n//             name:\"Will Mount Name\"\r\n//         });\r\n//         console.log(\"inside set timeout\");\r\n//     },3000)\r\n//     console.log(\"will mount sync\");\r\n// }\r\n// componentDidMount(){\r\n//     console.log(\"running did mount\");\r\n//     setTimeout( ()=>{\r\n//         this.setState({name:'Rajesh did'});\r\n//     },1000)\r\n// }\r\n\r\n// render(){\r\n//     console.log(\"Inside Render\");\r\n//     return(\r\n//         <h1>Hello {this.state.name}</h1>\r\n//     )\r\n// }\r\n// }\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport tachyons from 'tachyons';\r\nimport App from './containers/App';\r\n\r\n// import Card from './Card';\r\n// import {robots}  from './robots';\r\n// import Prop from './Prop';\r\n// import CardList from './CardList';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.Fragment>\r\n    <div >\r\n      <App />\r\n      {/* <Prop propElem={<h1>prop element</h1>}/> */}\r\n      {/* <Card id = {robots[0].id} name = {robots[0].name} username = {robots[0].username} email = {robots[0].email}/> */}\r\n      {/* <Card id = {robots[1].id} name = {robots[1].name} username = {robots[1].username} email = {robots[1].email}/>  */}\r\n    </div>,\r\n  </React.Fragment>,\r\n  document.getElementById('root')\r\n );\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}